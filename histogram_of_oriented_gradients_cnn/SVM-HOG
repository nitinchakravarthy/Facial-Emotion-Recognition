{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"SVM-HOG","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"k06BphqQLKps","colab_type":"code","outputId":"05b2def8-e8d4-49e1-82d0-9c6919664ae2","executionInfo":{"status":"ok","timestamp":1543875543849,"user_tz":360,"elapsed":710308,"user":{"displayName":"Venkata Nitin Chakravarthy Gummidela","photoUrl":"","userId":"12388962152434948445"}},"colab":{"base_uri":"https://localhost:8080/","height":168}},"cell_type":"code","source":["import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","from skimage import io\n","from sklearn.cross_validation import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.decomposition import PCA\n","    \n","import sklearn\n","from sklearn import preprocessing\n","from sklearn.ensemble import AdaBoostClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.metrics import accuracy_score\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.ensemble import AdaBoostRegressor\n","from sklearn import metrics\n","from sklearn.model_selection import StratifiedKFold\n","from sklearn.svm import SVC\n","\n","import numpy\n","import csv\n","import scipy.misc\n","import scipy\n","from scipy import ndimage\n","import numpy as np\n","# import dataprocessing\n","\n","from google.colab import drive\n","drive.mount('/content/gdrive')\n"],"execution_count":3,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/cross_validation.py:41: DeprecationWarning: This module was deprecated in version 0.18 in favor of the model_selection module into which all the refactored classes and functions are moved. Also note that the interface of the new CV iterators are different from that of this module. This module will be removed in 0.20.\n","  \"This module will be removed in 0.20.\", DeprecationWarning)\n"],"name":"stderr"},{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdocs.test%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.photos.readonly%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fpeopleapi.readonly&response_type=code\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/gdrive\n"],"name":"stdout"}]},{"metadata":{"id":"wgPMC_idMa3v","colab_type":"code","colab":{}},"cell_type":"code","source":["## parameters\n","class Dataset:\n","    name = 'Fer2013'\n","    train_folder = 'gdrive/My Drive/machine learning/fer2013_features/Training'\n","    validation_folder = 'gdrive/My Drive/machine learning/fer2013_features/PublicTest'\n","    test_folder = 'gdrive/My Drive/machine learning/fer2013_features/PrivateTest'\n","    trunc_trainset_to = -1\n","    trunc_validationset_to = -1\n","    trunc_testset_to = -1\n","\n","class Hyperparams:\n","    random_state = 0\n","    epochs = 10000\n","    epochs_during_hyperopt = 500\n","    kernel = 'rbf'  # 'rbf', 'linear', 'poly' or 'sigmoid'\n","    decision_function = 'ovr'  # 'ovo' for OneVsOne and 'ovr' for OneVsRest'\n","    features = \"landmarks_and_hog\" # \"landmarks\" or \"hog\" or \"landmarks_and_hog\"\n","    gamma = 'auto' # use a float number or 'auto' \n","class Training:\n","    save_model = True\n","    save_model_path = \"gdrive/My Drive/machine learning/fer2013_features/saved_model.bin\"\n","\n","DATASET = Dataset()\n","TRAINING = Training()\n","HYPERPARAMS = Hyperparams()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"15Qo11JSADkY","colab_type":"code","outputId":"a67e49cb-f8e3-4a39-b057-c1a0b42c5d77","executionInfo":{"status":"ok","timestamp":1543874839957,"user_tz":360,"elapsed":9563,"user":{"displayName":"Venkata Nitin Chakravarthy Gummidela","photoUrl":"","userId":"12388962152434948445"}},"colab":{"base_uri":"https://localhost:8080/","height":299}},"cell_type":"code","source":["!pip install hyperopt"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Collecting hyperopt\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/ce/9f/f6324af3fc43f352e568b5850695c30ed7dd14af06a94f97953ff9187569/hyperopt-0.1.1-py3-none-any.whl (117kB)\n","\u001b[K    100% |████████████████████████████████| 122kB 8.2MB/s \n","\u001b[?25hRequirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from hyperopt) (1.11.0)\n","Requirement already satisfied: future in /usr/local/lib/python3.6/dist-packages (from hyperopt) (0.16.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from hyperopt) (1.14.6)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.6/dist-packages (from hyperopt) (1.1.0)\n","Collecting pymongo (from hyperopt)\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/b1/45/5440555b901a8416196fbf2499c4678ef74de8080c007104107a8cfdda20/pymongo-3.7.2-cp36-cp36m-manylinux1_x86_64.whl (408kB)\n","\u001b[K    100% |████████████████████████████████| 409kB 18.0MB/s \n","\u001b[?25hRequirement already satisfied: networkx in /usr/local/lib/python3.6/dist-packages (from hyperopt) (2.2)\n","Requirement already satisfied: decorator>=4.3.0 in /usr/local/lib/python3.6/dist-packages (from networkx->hyperopt) (4.3.0)\n","Installing collected packages: pymongo, hyperopt\n","Successfully installed hyperopt-0.1.1 pymongo-3.7.2\n"],"name":"stdout"}]},{"metadata":{"id":"skt6BbntQnzG","colab_type":"code","colab":{}},"cell_type":"code","source":["def load_data(validation=False, test=False):\n","    \n","    data_dict = dict()\n","    validation_dict = dict()\n","    test_dict = dict()\n","\n","    if DATASET.name == \"Fer2013\":\n","        # load train set\n","        if HYPERPARAMS.features == \"landmarks_and_hog\":\n","            data_dict['X'] = np.load(DATASET.train_folder + '/landmarks.npy')\n","            data_dict['X'] = np.array([x.flatten() for x in data_dict['X']])\n","            data_dict['X'] = np.concatenate((data_dict['X'], np.load(DATASET.train_folder + '/hog_features.npy')), axis=1)\n","        elif HYPERPARAMS.features == \"landmarks\":\n","            data_dict['X'] = np.load(DATASET.train_folder + '/landmarks.npy')\n","            data_dict['X'] = np.array([x.flatten() for x in data_dict['X']])\n","        elif HYPERPARAMS.features == \"hog\":\n","            data_dict['X'] = np.load(DATASET.train_folder + '/hog_features.npy')\n","        else:\n","            print( \"Error '{}' features not recognized\".format(HYPERPARAMS.features))\n","        data_dict['Y'] = np.load(DATASET.train_folder + '/labels.npy')\n","        if DATASET.trunc_trainset_to > 0:\n","            data_dict['X'] = data_dict['X'][0:DATASET.trunc_trainset_to, :]\n","            data_dict['Y'] = data_dict['Y'][0:DATASET.trunc_trainset_to]\n","        if validation:\n","            # load validation set \n","            if HYPERPARAMS.features == \"landmarks_and_hog\":\n","                validation_dict['X'] = np.load(DATASET.validation_folder + '/landmarks.npy')\n","                validation_dict['X'] = np.array([x.flatten() for x in validation_dict['X']])\n","                validation_dict['X'] = np.concatenate((validation_dict['X'], np.load(DATASET.validation_folder + '/hog_features.npy')), axis=1)\n","            elif HYPERPARAMS.features == \"landmarks\":\n","                validation_dict['X'] = np.load(DATASET.validation_folder + '/landmarks.npy')\n","                validation_dict['X'] = np.array([x.flatten() for x in validation_dict['X']])\n","            elif HYPERPARAMS.features == \"hog\":\n","                validation_dict['X'] = np.load(DATASET.validation_folder + '/hog_features.npy')\n","            else:\n","                print( \"Error '{}' features not recognized\".format(HYPERPARAMS.features))\n","            validation_dict['Y'] = np.load(DATASET.validation_folder + '/labels.npy')\n","            if DATASET.trunc_validationset_to > 0:\n","                validation_dict['X'] = validation_dict['X'][0:DATASET.trunc_validationset_to, :]\n","                validation_dict['Y'] = validation_dict['Y'][0:DATASET.trunc_validationset_to]\n","        if test:\n","            # load train set\n","            if HYPERPARAMS.features == \"landmarks_and_hog\":\n","                test_dict['X'] = np.load(DATASET.test_folder + '/landmarks.npy')\n","                test_dict['X'] = np.array([x.flatten() for x in test_dict['X']])\n","                test_dict['X'] = np.concatenate((test_dict['X'], np.load(DATASET.test_folder + '/hog_features.npy')), axis=1)\n","            elif HYPERPARAMS.features == \"landmarks\":\n","                test_dict['X'] = np.load(DATASET.test_folder + '/landmarks.npy')\n","                test_dict['X'] = np.array([x.flatten() for x in test_dict['X']])\n","            elif HYPERPARAMS.features == \"hog\":\n","                test_dict['X'] = np.load(DATASET.test_folder + '/hog_features.npy')\n","            else:\n","                print( \"Error '{}' features not recognized\".format(HYPERPARAMS.features))\n","            test_dict['Y'] = np.load(DATASET.test_folder + '/labels.npy')\n","            np.save(DATASET.test_folder + \"/lab.npy\", test_dict['Y'])\n","            if DATASET.trunc_testset_to > 0:\n","                test_dict['X'] = test_dict['X'][0:DATASET.trunc_testset_to, :]\n","                test_dict['Y'] = test_dict['Y'][0:DATASET.trunc_testset_to]\n","\n","        if not validation and not test:\n","            return data_dict\n","        elif not test:\n","            return data_dict, validation_dict\n","        else: \n","            return data_dict, validation_dict, test_dict\n","    else:\n","        print( \"Unknown dataset\")\n","        exit()\n","\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"XVRVy9lyWytI","colab_type":"code","outputId":"1c2b0a49-d055-40c5-e22c-4e8bde05bbc0","executionInfo":{"status":"ok","timestamp":1543875578780,"user_tz":360,"elapsed":738007,"user":{"displayName":"Venkata Nitin Chakravarthy Gummidela","photoUrl":"","userId":"12388962152434948445"}},"colab":{"base_uri":"https://localhost:8080/","height":131}},"cell_type":"code","source":["data, validation, test = load_data(validation=True, test=True)\n","print(data['X'].shape)\n","print(data['Y'].shape)\n","\n","\n","Y = [np.where(r==1)[0][0] for r in data['Y']]\n","Y_val = [np.where(r==1)[0][0] for r in validation['Y']]\n","Y_test = [np.where(r==1)[0][0] for r in test['Y']]\n","\n","# print(validation['Y'])\n","# print(test['Y'])\n","# [1, 0, 3]\n","print(Y)\n","print(Y_val)\n","print(Y_test)"],"execution_count":6,"outputs":[{"output_type":"stream","text":["(3436, 2728)\n","(3436, 7)\n","[0, 0, 2, 4, 6, 2, 4, 3, 3, 2, 0, 6, 6, 6, 3, 5, 3, 2, 6, 4, 4, 2, 0, 0, 3, 3, 5, 0, 3, 5, 3, 6, 3, 2, 3, 6, 6, 6, 0, 5, 0, 3, 4, 0, 6, 2, 3, 6, 2, 2, 2, 5, 5, 6, 4, 5, 0, 3, 4, 2, 6, 5, 3, 4, 3, 0, 4, 3, 0, 5, 4, 2, 4, 2, 0, 6, 0, 0, 5, 4, 3, 5, 3, 6, 2, 2, 4, 4, 5, 4, 0, 0, 6, 0, 6, 2, 2, 3, 4, 3, 3, 2, 6, 3, 4, 3, 2, 0, 2, 3, 2, 3, 6, 6, 3, 4, 4, 0, 3, 3, 0, 2, 0, 0, 3, 3, 0, 4, 5, 2, 4, 2, 5, 3, 0, 6, 6, 2, 2, 3, 2, 3, 3, 3, 3, 3, 4, 2, 2, 0, 0, 2, 6, 3, 4, 5, 3, 0, 2, 4, 5, 2, 3, 4, 6, 3, 4, 3, 6, 0, 4, 4, 4, 2, 6, 5, 5, 6, 5, 2, 3, 2, 3, 4, 0, 2, 0, 3, 0, 2, 2, 5, 3, 5, 5, 4, 3, 0, 6, 5, 2, 6, 0, 0, 4, 5, 6, 3, 5, 5, 3, 2, 2, 3, 3, 3, 3, 6, 3, 6, 3, 0, 6, 3, 2, 0, 6, 5, 6, 0, 5, 4, 3, 0, 3, 0, 4, 5, 4, 3, 3, 0, 0, 6, 2, 0, 6, 3, 0, 0, 6, 0, 5, 6, 3, 2, 5, 5, 2, 0, 2, 6, 6, 0, 2, 3, 4, 2, 6, 5, 2, 2, 6, 6, 6, 2, 5, 3, 0, 5, 0, 4, 3, 3, 3, 3, 6, 3, 2, 4, 6, 3, 2, 4, 0, 0, 3, 2, 0, 1, 2, 2, 5, 3, 5, 4, 4, 0, 2, 3, 4, 6, 4, 2, 2, 3, 5, 4, 4, 5, 6, 4, 5, 0, 3, 3, 3, 2, 5, 5, 5, 3, 5, 3, 3, 3, 5, 6, 0, 4, 2, 2, 0, 4, 5, 5, 6, 6, 3, 2, 4, 2, 4, 0, 5, 0, 3, 5, 2, 4, 0, 4, 5, 6, 3, 2, 3, 5, 0, 0, 3, 3, 2, 6, 0, 2, 6, 0, 3, 2, 3, 2, 6, 4, 3, 4, 4, 0, 1, 2, 4, 6, 5, 0, 4, 6, 6, 6, 2, 6, 4, 3, 2, 4, 0, 6, 3, 2, 3, 0, 6, 5, 0, 5, 2, 6, 1, 3, 2, 6, 2, 0, 4, 6, 4, 5, 4, 4, 2, 0, 4, 0, 2, 0, 0, 5, 3, 3, 5, 3, 3, 4, 6, 5, 3, 3, 3, 4, 4, 6, 3, 4, 2, 3, 2, 2, 3, 4, 3, 6, 2, 6, 4, 3, 0, 3, 4, 6, 6, 0, 0, 5, 3, 1, 2, 4, 2, 2, 3, 2, 5, 0, 6, 2, 4, 3, 2, 3, 5, 0, 6, 6, 5, 6, 5, 3, 0, 5, 6, 0, 2, 6, 6, 6, 2, 4, 6, 2, 6, 0, 5, 3, 3, 4, 4, 0, 0, 2, 5, 0, 6, 0, 6, 5, 4, 0, 0, 3, 5, 5, 4, 3, 3, 1, 4, 6, 6, 3, 2, 3, 3, 6, 6, 4, 6, 0, 2, 6, 5, 4, 2, 6, 6, 3, 5, 6, 4, 6, 0, 4, 2, 3, 3, 0, 0, 6, 2, 6, 3, 3, 6, 5, 3, 1, 3, 2, 2, 4, 2, 2, 4, 0, 3, 5, 6, 3, 3, 2, 3, 0, 4, 2, 6, 2, 3, 5, 6, 2, 4, 2, 2, 6, 6, 4, 6, 6, 3, 4, 0, 3, 4, 4, 0, 3, 4, 6, 4, 0, 4, 6, 3, 5, 2, 3, 0, 0, 3, 6, 3, 3, 6, 4, 5, 0, 2, 3, 0, 3, 5, 3, 4, 3, 4, 6, 6, 3, 4, 5, 3, 6, 4, 6, 5, 3, 0, 3, 2, 3, 3, 3, 5, 5, 6, 2, 3, 0, 3, 3, 3, 2, 5, 0, 6, 6, 3, 5, 0, 0, 3, 6, 4, 3, 3, 5, 3, 3, 5, 3, 4, 2, 3, 3, 5, 3, 6, 5, 4, 4, 5, 6, 0, 2, 2, 4, 0, 6, 3, 2, 5, 2, 2, 4, 2, 3, 0, 6, 0, 6, 2, 5, 3, 3, 3, 2, 3, 6, 5, 0, 3, 2, 4, 2, 6, 4, 3, 4, 3, 3, 3, 2, 0, 2, 5, 0, 2, 2, 2, 6, 2, 4, 5, 5, 4, 4, 4, 2, 0, 6, 1, 5, 3, 4, 6, 5, 0, 0, 6, 6, 2, 2, 4, 5, 6, 2, 3, 3, 4, 5, 0, 4, 3, 6, 4, 5, 5, 6, 3, 6, 5, 5, 0, 3, 3, 6, 2, 6, 5, 0, 4, 2, 4, 6, 3, 3, 2, 4, 2, 1, 4, 3, 3, 2, 4, 3, 5, 2, 0, 3, 4, 5, 3, 3, 4, 0, 0, 2, 1, 3, 4, 3, 3, 4, 6, 2, 0, 0, 2, 5, 6, 4, 3, 6, 0, 5, 4, 1, 2, 2, 5, 3, 0, 0, 6, 5, 0, 6, 3, 5, 6, 2, 0, 0, 2, 3, 1, 5, 4, 5, 5, 2, 3, 2, 2, 3, 6, 6, 0, 6, 4, 0, 3, 0, 4, 0, 6, 6, 2, 3, 5, 4, 2, 6, 3, 5, 5, 3, 2, 3, 3, 4, 0, 6, 4, 4, 2, 6, 3, 2, 0, 5, 4, 2, 6, 6, 2, 3, 6, 6, 4, 6, 2, 3, 4, 0, 2, 6, 3, 4, 0, 4, 6, 6, 0, 4, 4, 0, 6, 6, 0, 4, 2, 2, 3, 3, 4, 6, 0, 5, 3, 2, 0, 3, 6, 4, 2, 4, 6, 4, 6, 2, 5, 0, 0, 0, 5, 0, 0, 6, 3, 3, 6, 0, 5, 3, 0, 6, 4, 4, 2, 6, 0, 3, 2, 2, 3, 0, 4, 4, 4, 6, 4, 6, 6, 5, 2, 3, 6, 3, 0, 6, 6, 4, 6, 4, 3, 4, 3, 4, 2, 4, 4, 4, 3, 2, 3, 0, 0, 3, 0, 4, 3, 6, 4, 3, 0, 2, 4, 3, 5, 3, 4, 4, 3, 5, 2, 4, 2, 6, 3, 0, 5, 4, 5, 5, 3, 6, 3, 3, 3, 3, 5, 0, 3, 3, 6, 4, 3, 3, 3, 5, 6, 0, 6, 2, 2, 3, 0, 4, 6, 4, 5, 0, 3, 1, 3, 2, 3, 3, 4, 2, 6, 3, 3, 3, 5, 3, 2, 5, 3, 2, 0, 4, 2, 6, 6, 3, 1, 3, 0, 3, 2, 6, 0, 3, 2, 0, 0, 5, 0, 5, 6, 3, 4, 3, 6, 1, 2, 3, 5, 6, 5, 3, 0, 0, 0, 4, 6, 0, 2, 4, 3, 3, 5, 2, 4, 5, 6, 2, 4, 4, 3, 3, 6, 2, 4, 5, 3, 0, 4, 3, 0, 3, 3, 4, 2, 3, 4, 5, 0, 3, 0, 6, 5, 2, 3, 3, 0, 3, 0, 2, 0, 2, 5, 4, 3, 4, 5, 0, 0, 6, 3, 0, 3, 6, 4, 5, 3, 3, 4, 6, 3, 4, 0, 2, 0, 6, 3, 3, 4, 6, 0, 5, 3, 3, 0, 3, 6, 4, 4, 3, 0, 0, 3, 0, 5, 0, 0, 3, 6, 3, 6, 0, 6, 4, 5, 0, 0, 6, 2, 4, 6, 2, 5, 0, 4, 0, 6, 3, 2, 5, 2, 3, 0, 4, 2, 6, 3, 4, 6, 5, 0, 6, 0, 2, 3, 0, 6, 3, 3, 6, 3, 5, 3, 4, 4, 1, 3, 0, 0, 3, 1, 6, 3, 2, 2, 3, 4, 6, 5, 6, 6, 4, 3, 3, 6, 3, 6, 4, 3, 5, 6, 5, 6, 4, 4, 3, 6, 3, 4, 0, 6, 2, 2, 6, 6, 2, 6, 4, 0, 3, 1, 0, 4, 6, 4, 4, 3, 0, 5, 3, 5, 2, 2, 6, 6, 2, 3, 5, 6, 4, 3, 4, 2, 6, 3, 3, 6, 4, 0, 6, 0, 3, 2, 2, 6, 2, 2, 6, 4, 0, 0, 2, 6, 4, 3, 3, 4, 6, 0, 5, 3, 4, 4, 3, 4, 0, 2, 2, 3, 5, 0, 3, 0, 0, 0, 0, 5, 2, 3, 5, 3, 3, 4, 6, 0, 3, 0, 3, 3, 2, 2, 4, 0, 0, 3, 3, 0, 0, 2, 5, 5, 2, 5, 5, 3, 4, 3, 6, 4, 3, 2, 6, 0, 0, 6, 6, 6, 6, 3, 3, 4, 3, 0, 6, 6, 3, 3, 6, 3, 2, 5, 2, 3, 6, 6, 3, 2, 2, 0, 6, 3, 2, 3, 0, 0, 6, 4, 3, 0, 5, 0, 5, 4, 0, 3, 4, 2, 5, 2, 3, 0, 4, 0, 4, 5, 2, 2, 5, 0, 2, 6, 2, 6, 4, 2, 3, 3, 0, 3, 2, 2, 4, 4, 0, 3, 2, 4, 3, 3, 5, 0, 3, 2, 6, 4, 5, 2, 3, 2, 3, 6, 6, 3, 6, 3, 2, 2, 3, 0, 2, 4, 4, 3, 0, 5, 5, 3, 3, 5, 6, 0, 4, 0, 3, 3, 3, 4, 3, 5, 2, 2, 4, 4, 0, 2, 5, 4, 3, 3, 3, 3, 3, 1, 3, 2, 3, 6, 3, 3, 4, 3, 2, 5, 6, 2, 0, 0, 4, 0, 4, 4, 4, 4, 4, 0, 6, 4, 2, 3, 6, 3, 6, 6, 4, 5, 0, 2, 2, 6, 3, 4, 3, 0, 5, 0, 3, 0, 0, 0, 2, 6, 3, 4, 0, 2, 0, 6, 0, 4, 2, 3, 2, 4, 3, 4, 2, 2, 6, 2, 4, 0, 6, 4, 3, 2, 5, 3, 5, 6, 1, 4, 4, 3, 3, 2, 3, 4, 3, 3, 6, 3, 0, 2, 4, 2, 4, 6, 6, 6, 0, 3, 0, 3, 3, 3, 4, 4, 0, 4, 6, 5, 0, 6, 5, 2, 3, 6, 2, 6, 6, 2, 1, 3, 6, 3, 5, 5, 2, 0, 6, 3, 6, 0, 3, 0, 6, 3, 3, 4, 3, 3, 5, 3, 6, 3, 6, 4, 3, 6, 3, 3, 6, 6, 4, 0, 6, 3, 3, 3, 3, 6, 5, 6, 2, 3, 4, 4, 3, 3, 6, 5, 0, 4, 4, 6, 4, 6, 0, 4, 5, 2, 2, 2, 6, 4, 5, 0, 2, 2, 4, 2, 0, 3, 6, 0, 5, 0, 6, 6, 3, 3, 2, 4, 2, 6, 6, 3, 4, 5, 3, 5, 4, 2, 6, 6, 3, 2, 5, 4, 6, 3, 2, 3, 3, 5, 3, 0, 5, 3, 4, 3, 2, 4, 3, 6, 3, 0, 1, 4, 6, 2, 3, 3, 6, 6, 6, 3, 3, 4, 3, 0, 2, 5, 3, 0, 2, 2, 5, 2, 2, 5, 3, 0, 2, 3, 3, 0, 5, 3, 3, 0, 4, 4, 3, 2, 3, 3, 6, 3, 6, 2, 3, 5, 5, 5, 0, 3, 2, 3, 2, 6, 6, 3, 3, 4, 6, 5, 2, 2, 4, 6, 0, 3, 1, 4, 3, 4, 0, 3, 0, 3, 4, 4, 3, 4, 5, 0, 2, 6, 5, 3, 3, 6, 0, 5, 4, 3, 6, 2, 3, 3, 6, 5, 2, 6, 4, 2, 4, 5, 6, 0, 3, 5, 6, 2, 3, 3, 3, 3, 2, 6, 4, 6, 3, 5, 6, 4, 6, 3, 0, 3, 4, 5, 0, 5, 3, 4, 5, 0, 5, 0, 5, 6, 3, 5, 3, 6, 2, 2, 3, 3, 4, 3, 4, 0, 3, 4, 0, 3, 2, 2, 4, 3, 0, 3, 4, 3, 4, 3, 2, 0, 2, 3, 4, 0, 5, 4, 4, 6, 3, 6, 4, 5, 3, 3, 3, 5, 0, 6, 4, 5, 6, 5, 3, 6, 6, 0, 2, 3, 3, 3, 0, 6, 4, 3, 1, 6, 5, 3, 6, 3, 4, 3, 0, 4, 4, 2, 6, 6, 6, 2, 4, 5, 3, 0, 0, 2, 5, 0, 5, 6, 3, 2, 4, 2, 1, 0, 4, 4, 6, 6, 2, 3, 4, 6, 5, 3, 4, 5, 6, 0, 0, 3, 5, 0, 3, 4, 3, 4, 4, 3, 0, 5, 2, 5, 4, 3, 6, 0, 4, 2, 2, 6, 6, 4, 2, 4, 0, 2, 6, 6, 0, 0, 0, 2, 5, 5, 2, 6, 0, 0, 6, 0, 5, 2, 4, 4, 6, 0, 4, 0, 2, 4, 2, 6, 4, 5, 5, 4, 6, 2, 6, 0, 2, 2, 2, 0, 4, 6, 0, 6, 4, 4, 6, 0, 6, 0, 2, 5, 0, 2, 5, 2, 4, 0, 6, 0, 2, 5, 0, 2, 6, 2, 4, 4, 5, 0, 4, 0, 6, 5, 2, 0, 6, 0, 1, 2, 2, 6, 6, 4, 6, 0, 2, 2, 1, 5, 0, 4, 5, 6, 6, 6, 5, 4, 4, 4, 2, 2, 0, 2, 0, 6, 0, 4, 5, 2, 0, 0, 0, 5, 2, 4, 6, 5, 0, 2, 6, 4, 6, 6, 6, 4, 6, 2, 0, 4, 6, 0, 2, 6, 5, 0, 4, 2, 2, 5, 4, 6, 4, 4, 4, 6, 0, 6, 2, 5, 0, 0, 4, 4, 2, 2, 2, 6, 4, 4, 6, 5, 0, 4, 4, 6, 0, 0, 5, 0, 2, 2, 6, 6, 6, 1, 6, 5, 4, 6, 2, 6, 5, 0, 0, 0, 5, 2, 6, 6, 2, 2, 6, 2, 0, 0, 6, 6, 2, 4, 4, 0, 0, 4, 6, 2, 2, 1, 6, 0, 6, 2, 6, 2, 5, 6, 5, 0, 4, 0, 4, 5, 5, 4, 4, 6, 4, 5, 5, 2, 0, 2, 2, 5, 6, 2, 0, 0, 5, 4, 6, 4, 6, 6, 6, 6, 4, 2, 2, 6, 2, 6, 6, 0, 4, 0, 6, 0, 2, 1, 2, 2, 5, 5, 0, 6, 0, 0, 2, 0, 6, 2, 6, 6, 0, 2, 6, 0, 4, 2, 6, 2, 2, 4, 1, 5, 6, 0, 2, 6, 4, 6, 0, 4, 6, 5, 2, 6, 2, 6, 5, 6, 6, 5, 4, 4, 6, 6, 0, 4, 6, 4, 4, 5, 4, 5, 4, 6, 4, 2, 5, 4, 4, 4, 5, 5, 0, 4, 0, 0, 6, 6, 4, 6, 2, 4, 6, 0, 4, 2, 5, 4, 0, 6, 0, 4, 6, 0, 0, 5, 4, 4, 2, 0, 5, 6, 6, 6, 0, 4, 5, 4, 6, 4, 6, 4, 4, 6, 1, 4, 2, 4, 5, 2, 4, 4, 2, 4, 0, 0, 2, 6, 6, 4, 5, 0, 4, 4, 2, 4, 2, 4, 4, 6, 4, 6, 6, 0, 6, 0, 4, 6, 6, 6, 4, 4, 6, 4, 2, 2, 0, 2, 5, 4, 0, 6, 6, 6, 6, 4, 6, 4, 6, 2, 4, 5, 6, 4, 5, 2, 5, 2, 2, 1, 6, 2, 4, 0, 6, 6, 4, 5, 4, 6, 2, 2, 2, 2, 0, 4, 2, 2, 0, 0, 2, 4, 0, 6, 2, 2, 6, 6, 0, 6, 0, 4, 4, 0, 6, 4, 4, 6, 4, 2, 4, 2, 0, 6, 0, 4, 4, 4, 2, 2, 4, 1, 0, 5, 4, 6, 6, 5, 2, 6, 4, 0, 0, 6, 0, 0, 6, 4, 5, 4, 2, 4, 2, 2, 5, 2, 2, 2, 6, 4, 4, 1, 6, 2, 5, 6, 6, 6, 2, 1, 0, 5, 1, 6, 4, 0, 6, 4, 6, 6, 5, 5, 5, 2, 6, 0, 5, 0, 6, 0, 2, 6, 4, 4, 4, 0, 4, 0, 2, 4, 5, 1, 4, 2, 0, 6, 1, 4, 6, 2, 4, 2, 4, 5, 5, 6, 5, 4, 0, 4, 0, 6, 6, 6, 0, 4, 0, 4, 4, 6, 0, 2, 5, 2, 5, 0, 5, 4, 6, 4, 5, 2, 0, 1, 4, 5, 0, 6, 4, 5, 4, 6, 2, 0, 2, 4, 6, 4, 6, 6, 6, 4, 2, 6, 5, 4, 0, 6, 5, 0, 5, 6, 6, 0, 0, 0, 4, 4, 0, 5, 4, 0, 2, 2, 5, 5, 0, 4, 2, 4, 0, 0, 2, 2, 4, 0, 4, 5, 1, 2, 2, 4, 2, 4, 4, 5, 5, 4, 4, 5, 0, 5, 5, 4, 4, 5, 5, 2, 0, 4, 2, 0, 4, 2, 2, 4, 4, 5, 4, 4, 5, 4, 2, 5, 5, 2, 4, 5, 2, 4, 4, 5, 4, 5, 0, 2, 2, 5, 4, 2, 4, 0, 4, 0, 0, 2, 4, 4, 5, 4, 5, 5, 4, 0, 5, 2, 5, 1, 0, 5, 0, 5, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 5, 2, 0, 0, 0, 2, 2, 2, 2, 5, 0, 0, 5, 5, 0, 5, 5, 2, 0, 0, 2, 5, 0, 2, 0, 0, 5, 5, 1, 2, 5, 0, 0, 5, 2, 0, 2, 5, 5, 0, 0, 5, 5, 2, 5, 2, 2, 0, 0, 0, 2, 2, 5, 2, 5, 2, 5, 0, 0, 0, 0, 2, 5, 5, 5, 1, 5, 1, 0, 2, 2, 5, 0, 2, 0, 0, 2, 0, 0, 0, 2, 0, 5, 1, 0, 5, 2, 2, 0, 0, 2, 0, 5, 2, 0, 0, 0, 2, 5, 0, 2, 2, 2, 0, 2, 0, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 5, 2, 0, 0, 5, 2, 2, 5, 5, 5, 0, 5, 5, 5, 0, 0, 5, 5, 1, 0, 1, 0, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 1, 5, 5, 5, 1, 5, 5, 5, 5, 5, 1, 5, 1, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 1, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 5, 5, 5, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n","[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n","[1, 1, 1, 1, 1, 1, 1, 1]\n"],"name":"stdout"}]},{"metadata":{"id":"AIFRwRjeRNX-","colab_type":"code","colab":{}},"cell_type":"code","source":["import time\n","import argparse\n","import os\n","import sys\n","if sys.version_info >= (3, 0):\n","        import _pickle as cPickle\n","else:\n","        import cPickle\n","from sklearn.svm import SVC\n","from sklearn.metrics import accuracy_score\n","\n","\n","def train(epochs=HYPERPARAMS.epochs, random_state=HYPERPARAMS.random_state, \n","          kernel=HYPERPARAMS.kernel, decision_function=HYPERPARAMS.decision_function, gamma=HYPERPARAMS.gamma, train_model=True):\n","\n","        print( \"loading dataset \" + DATASET.name + \"...\")\n","#         if train_model:\n","#                 data, validation = load_data(validation=True)\n","#         else:\n","        data, validation, test = load_data(validation=True, test=True)\n","        \n","        if train_model:\n","            # Training phase\n","            print( \"building model...\")\n","            model = SVC(random_state=random_state, max_iter=epochs, kernel=kernel, decision_function_shape=decision_function, gamma=gamma)\n","\n","            print( \"start training...\")\n","            print( \"--\")\n","            print( \"kernel: {}\".format(kernel))\n","            print( \"decision function: {} \".format(decision_function))\n","            print( \"max epochs: {} \".format(epochs))\n","            print( \"gamma: {} \".format(gamma))\n","            print( \"--\")\n","            print( \"Training samples: {}\".format(len(data['Y'])))\n","            print( \"Validation samples: {}\".format(len(validation['Y'])))\n","            print( \"--\")\n","            start_time = time.time()\n","            model.fit(data['X'], Y)\n","            training_time = time.time() - start_time\n","            print( \"training time = {0:.1f} sec\".format(training_time))\n","\n","            if TRAINING.save_model:\n","                print( \"saving model...\")\n","                with open(TRAINING.save_model_path, 'wb') as f:\n","                        cPickle.dump(model, f)\n","\n","            print( \"evaluating...\")\n","            validation_accuracy = evaluate(model, validation['X'], Y_val)\n","            print( \"  - validation accuracy = {0:.1f}\".format(validation_accuracy*100))\n","            return model\n","        else:\n","            # Testing phase : load saved model and evaluate on test dataset\n","            print( \"start evaluation...\")\n","            print( \"loading pretrained model...\")\n","            if os.path.isfile(TRAINING.save_model_path):\n","                with open(TRAINING.save_model_path, 'rb') as f:\n","                        model = cPickle.load(f)\n","            else:\n","                print( \"Error: file '{}' not found\".format(TRAINING.save_model_path))\n","                exit()\n","\n","            print( \"--\")\n","            print( \"Validation samples: {}\".format(len(Y_val)))\n","            print( \"Test samples: {}\".format(len(Y_test)))\n","            print( \"--\")\n","            print( \"evaluating...\")\n","            start_time = time.time()\n","            validation_accuracy = evaluate(model, validation['X'],  Y_val)\n","            print( \"  - validation accuracy = {0:.1f}\".format(validation_accuracy*100))\n","            test_accuracy = evaluate(model, test['X'], Y_test)\n","            print( \"  - test accuracy = {0:.1f}\".format(test_accuracy*100))\n","            print( \"  - evalution time = {0:.1f} sec\".format(time.time() - start_time))\n","            return model\n","\n","def evaluate(model, X, Y):\n","        predicted_Y = model.predict(X)\n","        accuracy = accuracy_score(Y, predicted_Y)\n","        \n","        return accuracy\n","\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"RETS91-TSFXG","colab_type":"code","outputId":"2b17f430-6686-4134-e73c-19ffd2ec3e21","executionInfo":{"status":"ok","timestamp":1543877527084,"user_tz":360,"elapsed":50873,"user":{"displayName":"Venkata Nitin Chakravarthy Gummidela","photoUrl":"","userId":"12388962152434948445"}},"colab":{"base_uri":"https://localhost:8080/","height":316}},"cell_type":"code","source":["\n","# if args.train==\"yes\" or args.train==\"Yes\" or args.train==\"YES\":\n"," model = train()\n","# if args.evaluate==\"yes\" or args.evaluate==\"Yes\" or args.evaluate==\"YES\":\n","# train(train_model=False)\n","# test_accuracy = evaluate(model, test['X'], Y_test)\n","# print( \"  - test accuracy = {0:.1f}\".format(test_accuracy*100))\n"],"execution_count":21,"outputs":[{"output_type":"stream","text":["loading dataset Fer2013...\n","building model...\n","start training...\n","--\n","kernel: rbf\n","decision function: ovr \n","max epochs: 10000 \n","gamma: auto \n","--\n","Training samples: 3436\n","Validation samples: 56\n","--\n","training time = 49.4 sec\n","saving model...\n","evaluating...\n","  - validation accuracy = 48.2\n"],"name":"stdout"}]},{"metadata":{"id":"6Urb6q38Nh7s","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":92},"outputId":"e6d5ac98-d789-4e4e-9096-b2b4b346cfb4","executionInfo":{"status":"ok","timestamp":1543877840812,"user_tz":360,"elapsed":891,"user":{"displayName":"Venkata Nitin Chakravarthy Gummidela","photoUrl":"","userId":"12388962152434948445"}}},"cell_type":"code","source":["print(model)"],"execution_count":22,"outputs":[{"output_type":"stream","text":["SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n","  decision_function_shape='ovr', degree=3, gamma='auto', kernel='rbf',\n","  max_iter=10000, probability=False, random_state=0, shrinking=True,\n","  tol=0.001, verbose=False)\n"],"name":"stdout"}]},{"metadata":{"id":"DEcJoPRVK3PV","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":475},"outputId":"f44204cf-54dd-4e6e-d527-ff40ee785213","executionInfo":{"status":"ok","timestamp":1543877914205,"user_tz":360,"elapsed":1407,"user":{"displayName":"Venkata Nitin Chakravarthy Gummidela","photoUrl":"","userId":"12388962152434948445"}}},"cell_type":"code","source":["from sklearn.metrics import confusion_matrix\n","y_prob = model.predict(validation['X'])\n","cm = confusion_matrix(Y_val, np.array(y_prob))\n","\n","print(cm)\n","\n","# Show confusion matrix in a separate window\n","plt.matshow(cm)\n","plt.title('Confusion matrix')\n","plt.colorbar()\n","plt.ylabel('True label')\n","plt.xlabel('Predicted label')\n","plt.show()\n","\n","import itertools\n","\n","def plot_confusion_matrix(cm, classes,\n","                          normalize=False,\n","                          title='Confusion matrix',\n","                          cmap=plt.cm.Blues):\n","    \"\"\"\n","    This function prints and plots the confusion matrix.\n","    Normalization can be applied by setting `normalize=True`.\n","    \"\"\"\n","    if normalize:\n","        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n","        print(\"Normalized confusion matrix\")\n","    else:\n","        print('Confusion matrix, without normalization')\n","\n","    print(cm)\n","\n","    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n","    plt.title(title)\n","    plt.colorbar()\n","    tick_marks = np.arange(len(classes))\n","    plt.xticks(tick_marks, classes, rotation=45)\n","    plt.yticks(tick_marks, classes)\n","\n","    fmt = '.2f' if normalize else 'd'\n","    thresh = cm.max() / 2.\n","    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n","        plt.text(j, i, format(cm[i, j], fmt),\n","                 horizontalalignment=\"center\",\n","                 color=\"white\" if cm[i, j] > thresh else \"black\")\n","\n","    plt.ylabel('True label')\n","    plt.xlabel('Predicted label')\n","    plt.tight_layout()"],"execution_count":25,"outputs":[{"output_type":"stream","text":["[[ 0  0  0  0  0  0  0]\n"," [ 8 27  7  3  5  2  4]\n"," [ 0  0  0  0  0  0  0]\n"," [ 0  0  0  0  0  0  0]\n"," [ 0  0  0  0  0  0  0]\n"," [ 0  0  0  0  0  0  0]\n"," [ 0  0  0  0  0  0  0]]\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<matplotlib.figure.Figure at 0x7f7601b93550>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"YwLQ0xg-K2zx","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":392},"outputId":"0643b1cc-ec13-4fbf-af2d-7ce1d606acc1","executionInfo":{"status":"ok","timestamp":1543882026044,"user_tz":360,"elapsed":912,"user":{"displayName":"Venkata Nitin Chakravarthy Gummidela","photoUrl":"","userId":"12388962152434948445"}}},"cell_type":"code","source":["print(\"Classification report for classifier %s:\\n%s\\n\" % (model, metrics.classification_report(Y_val, y_prob)))"],"execution_count":28,"outputs":[{"output_type":"stream","text":["Classification report for classifier SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n","  decision_function_shape='ovr', degree=3, gamma='auto', kernel='rbf',\n","  max_iter=10000, probability=False, random_state=0, shrinking=True,\n","  tol=0.001, verbose=False):\n","             precision    recall  f1-score   support\n","\n","          0       0.00      0.00      0.00         0\n","          1       1.00      0.48      0.65        56\n","          2       0.00      0.00      0.00         0\n","          3       0.00      0.00      0.00         0\n","          4       0.00      0.00      0.00         0\n","          5       0.00      0.00      0.00         0\n","          6       0.00      0.00      0.00         0\n","\n","avg / total       1.00      0.48      0.65        56\n","\n","\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/metrics/classification.py:1137: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples.\n","  'recall', 'true', average, warn_for)\n"],"name":"stderr"}]},{"metadata":{"id":"HyVHNjrK9SZ3","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":399},"outputId":"852b82e9-e32b-4211-c4ac-c981ffd89c39","executionInfo":{"status":"error","timestamp":1543875633123,"user_tz":360,"elapsed":789646,"user":{"displayName":"Venkata Nitin Chakravarthy Gummidela","photoUrl":"","userId":"12388962152434948445"}}},"cell_type":"code","source":["\n","import time\n","import argparse\n","import pprint\n","import numpy as np \n","from hyperopt import fmin, tpe, hp, STATUS_OK, Trials\n","\n","# from train import train\n","# from parameters import HYPERPARAMS\n","\n","# define the search space\n","fspace = {\n","    'decision_function': hp.choice('decision_function', ['ovr', 'ovo']),\n","    'gamma':  hp.uniform('gamma', 0.001, 0.0001),\n","}\n","\n","# parse arguments\n","# parser = argparse.ArgumentParser()\n","# parser.add_argument(\"-m\", \"--max_evals\", required=True, help=\"Maximum number of evaluations during hyperparameters search\")\n","# args = parser.parse_args()\n","max_evals = 15 #int(args.max_evals)\n","current_eval = 1\n","train_history = []\n"],"execution_count":9,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-8665bd7390c3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mhyperopt\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mfmin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtpe\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSTATUS_OK\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTrials\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mtrain\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0;31m# from parameters import HYPERPARAMS\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'train'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"]}]},{"metadata":{"id":"97Si9uvT_8e7","colab_type":"code","colab":{}},"cell_type":"code","source":["\n","def function_to_minimize(hyperparams, gamma='auto', decision_function='ovr'):\n","    decision_function = hyperparams['decision_function']\n","    gamma = hyperparams['gamma']\n","    global current_eval \n","    global max_evals\n","    print( \"#################################\")\n","    print( \"       Evaluation {} of {}\".format(current_eval, max_evals))\n","    print( \"#################################\")\n","    start_time = time.time()\n","    try:\n","        accuracy = train(epochs=HYPERPARAMS.epochs_during_hyperopt, decision_function=decision_function, gamma=gamma)\n","        training_time = int(round(time.time() - start_time))\n","        current_eval += 1\n","        train_history.append({'accuracy':accuracy, 'decision_function':decision_function, 'gamma':gamma, 'time':training_time})\n","    except Exception as e:\n","        print( \"#################################\")\n","        print( \"Exception during training: {}\".format(str(e)))\n","        print( \"Saving train history in train_history.npy\")\n","        np.save(\"gdrive/My Drive/machine learning/fer2013_features/train_history.npy\", train_history)\n","        exit()\n","    return {'loss': -accuracy, 'time': training_time, 'status': STATUS_OK}\n","\n","# lunch the hyperparameters search\n","trials = Trials()\n","best_trial = fmin(fn=function_to_minimize, space=fspace, algo=tpe.suggest, max_evals=max_evals, trials=trials)\n","\n","# get some additional information and print( the best parameters\n","for trial in trials.trials:\n","    if trial['misc']['vals']['decision_function'][0] == best_trial['decision_function'] and \\\n","            trial['misc']['vals']['gamma'][0] == best_trial['gamma']:\n","        best_trial['accuracy'] = -trial['result']['loss'] * 100\n","        best_trial['time'] = trial['result']['time']\n","print( \"#################################\")\n","print( \"      Best parameters found\")\n","print( \"#################################\")\n","pprint.pprint(best_trial)\n","print( \"decision_function { 0: ovr, 1: ovo }\")\n","print( \"#################################\")"],"execution_count":0,"outputs":[]},{"metadata":{"id":"oB5yYWTnPKtA","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]}]}